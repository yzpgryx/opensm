package sm4

import (
	"crypto/cipher"
	"encoding/binary"
	"opensm/src/util"
)

type sm4Cipher struct {
	key []byte
	iv  []byte
}

const BlockSize = 16

var CK = [32]uint32{
	0x00070E15, 0x1C232A31, 0x383F464D, 0x545B6269,
	0x70777E85, 0x8C939AA1, 0xA8AFB6BD, 0xC4CBD2D9,
	0xE0E7EEF5, 0xFC030A11, 0x181F262D, 0x343B4249,
	0x50575E65, 0x6C737A81, 0x888F969D, 0xA4ABB2B9,
	0xC0C7CED5, 0xDCE3EAF1, 0xF8FF060D, 0x141B2229,
	0x30373E45, 0x4C535A61, 0x686F767D, 0x848B9299,
	0xA0A7AEB5, 0xBCC3CAD1, 0xD8DFE6ED, 0xF4FB0209,
	0x10171E25, 0x2C333A41, 0x484F565D, 0x646B7279,
}

var FK = [4]uint32{
	0xA3B1BAC6, 0x56AA3350, 0x677D9197, 0xB27022DC,
}

func Sbox(x uint8) uint8 {
	box := [16][16]byte{
		{0xd6, 0x90, 0xe9, 0xfe, 0xcc, 0xe1, 0x3d, 0xb7, 0x16, 0xb6, 0x14, 0xc2, 0x28, 0xfb, 0x2c, 0x05},
		{0x2b, 0x67, 0x9a, 0x76, 0x2a, 0xbe, 0x04, 0xc3, 0xaa, 0x44, 0x13, 0x26, 0x49, 0x86, 0x06, 0x99},
		{0x9c, 0x42, 0x50, 0xf4, 0x91, 0xef, 0x98, 0x7a, 0x33, 0x54, 0x0b, 0x43, 0xed, 0xcf, 0xac, 0x62},
		{0xe4, 0xb3, 0x1c, 0xa9, 0xc9, 0x08, 0xe8, 0x95, 0x80, 0xdf, 0x94, 0xfa, 0x75, 0x8f, 0x3f, 0xa6},
		{0x47, 0x07, 0xa7, 0xfc, 0xf3, 0x73, 0x17, 0xba, 0x83, 0x59, 0x3c, 0x19, 0xe6, 0x85, 0x4f, 0xa8},
		{0x68, 0x6b, 0x81, 0xb2, 0x71, 0x64, 0xda, 0x8b, 0xf8, 0xeb, 0x0f, 0x4b, 0x70, 0x56, 0x9d, 0x35},
		{0x1e, 0x24, 0x0e, 0x5e, 0x63, 0x58, 0xd1, 0xa2, 0x25, 0x22, 0x7c, 0x3b, 0x01, 0x21, 0x78, 0x87},
		{0xd4, 0x00, 0x46, 0x57, 0x9f, 0xd3, 0x27, 0x52, 0x4c, 0x36, 0x02, 0xe7, 0xa0, 0xc4, 0xc8, 0x9e},
		{0xea, 0xbf, 0x8a, 0xd2, 0x40, 0xc7, 0x38, 0xb5, 0xa3, 0xf7, 0xf2, 0xce, 0xf9, 0x61, 0x15, 0xa1},
		{0xe0, 0xae, 0x5d, 0xa4, 0x9b, 0x34, 0x1a, 0x55, 0xad, 0x93, 0x32, 0x30, 0xf5, 0x8c, 0xb1, 0xe3},
		{0x1d, 0xf6, 0xe2, 0x2e, 0x82, 0x66, 0xca, 0x60, 0xc0, 0x29, 0x23, 0xab, 0x0d, 0x53, 0x4e, 0x6f},
		{0xd5, 0xdb, 0x37, 0x45, 0xde, 0xfd, 0x8e, 0x2f, 0x03, 0xff, 0x6a, 0x72, 0x6d, 0x6c, 0x5b, 0x51},
		{0x8d, 0x1b, 0xaf, 0x92, 0xbb, 0xdd, 0xbc, 0x7f, 0x11, 0xd9, 0x5c, 0x41, 0x1f, 0x10, 0x5a, 0xd8},
		{0x0a, 0xc1, 0x31, 0x88, 0xa5, 0xcd, 0x7b, 0xbd, 0x2d, 0x74, 0xd0, 0x12, 0xb8, 0xe5, 0xb4, 0xb0},
		{0x89, 0x69, 0x97, 0x4a, 0x0c, 0x96, 0x77, 0x7e, 0x65, 0xb9, 0xf1, 0x09, 0xc5, 0x6e, 0xc6, 0x84},
		{0x18, 0xf0, 0x7d, 0xec, 0x3a, 0xdc, 0x4d, 0x20, 0x79, 0xee, 0x5f, 0x3e, 0xd7, 0xcb, 0x39, 0x48},
	}

	return box[(x>>4)&0x0F][x&0x0F]
}

func T(a uint32) uint32 {
	a0 := uint8((a >> 24) & 0xFF)
	a1 := uint8((a >> 16) & 0xFF)
	a2 := uint8((a >> 8) & 0xFF)
	a3 := uint8(a & 0xFF)

	B := binary.BigEndian.Uint32([]uint8{Sbox(a0), Sbox(a1), Sbox(a2), Sbox(a3)})
	return B ^ util.RotateLeft(B, 2) ^ util.RotateLeft(B, 10) ^ util.RotateLeft(B, 18) ^ util.RotateLeft(B, 24)
}

func TPrime(a uint32) uint32 {
	a0 := uint8((a >> 24) & 0xFF)
	a1 := uint8((a >> 16) & 0xFF)
	a2 := uint8((a >> 8) & 0xFF)
	a3 := uint8(a & 0xFF)

	B := binary.BigEndian.Uint32([]uint8{Sbox(a0), Sbox(a1), Sbox(a2), Sbox(a3)})
	return B ^ util.RotateLeft(B, 13) ^ util.RotateLeft(B, 23)
}

func F(x0, x1, x2, x3, rk uint32) uint32 {
	return x0 ^ T(x1^x2^x3^rk)
}

func MK(mk0, mk1, mk2, mk3 uint32) []uint32 {
	k := make([]uint32, 36)
	rk := make([]uint32, 32)

	k[0], k[1], k[2], k[3] = mk0^FK[0], mk1^FK[1], mk2^FK[2], mk3^FK[3]

	for i := 0; i < 32; i++ {
		k[i+4] = k[i] ^ TPrime(k[i+1]^k[i+2]^k[i+3]^CK[i])
		rk[i] = k[i+4]
	}

	return rk
}

func encryptBlock(x0, x1, x2, x3 uint32, rk []uint32) (uint32, uint32, uint32, uint32) {
	X := make([]uint32, 36)

	X[0], X[1], X[2], X[3] = x0, x1, x2, x3
	for i := 0; i < 32; i++ {
		X[i+4] = F(X[i], X[i+1], X[i+2], X[i+3], rk[i])
	}

	return X[35], X[34], X[33], X[32]
}

func decryptBlock(x0, x1, x2, x3 uint32, rk []uint32) (uint32, uint32, uint32, uint32) {
	X := make([]uint32, 36)

	X[0], X[1], X[2], X[3] = x0, x1, x2, x3
	for i := 0; i < 32; i++ {
		X[i+4] = F(X[i], X[i+1], X[i+2], X[i+3], rk[32-(i+1)])
	}

	return X[35], X[34], X[33], X[32]
}

func NewCipher(key []byte) (cipher.Block, error) {
	c := sm4Cipher{
		key: key,
	}

	return &c, nil
}

func (c *sm4Cipher) BlockSize() int {
	return BlockSize
}

func (c *sm4Cipher) Encrypt(dst, src []byte) {
	rk := MK(binary.BigEndian.Uint32(c.key[0:4]), binary.BigEndian.Uint32(c.key[4:8]),
		binary.BigEndian.Uint32(c.key[8:12]), binary.BigEndian.Uint32(c.key[12:16]))

	for i := 0; i*BlockSize < len(src); i++ {
		x0 := binary.BigEndian.Uint32(src[i*4 : i*4+4])
		x1 := binary.BigEndian.Uint32(src[i*4+4 : i*4+8])
		x2 := binary.BigEndian.Uint32(src[i*4+8 : i*4+12])
		x3 := binary.BigEndian.Uint32(src[i*4+12 : i*4+16])

		c0, c1, c2, c3 := encryptBlock(x0, x1, x2, x3, rk)

		binary.BigEndian.PutUint32(dst[i*4:i*4+4], c0)
		binary.BigEndian.PutUint32(dst[i*4+4:i*4+8], c1)
		binary.BigEndian.PutUint32(dst[i*4+8:i*4+12], c2)
		binary.BigEndian.PutUint32(dst[i*4+12:i*4+16], c3)
	}
}

func (c *sm4Cipher) Decrypt(dst, src []byte) {
	rk := MK(binary.BigEndian.Uint32(c.key[0:4]), binary.BigEndian.Uint32(c.key[4:8]),
		binary.BigEndian.Uint32(c.key[8:12]), binary.BigEndian.Uint32(c.key[12:16]))

	for i := 0; i*BlockSize < len(src); i++ {
		x0 := binary.BigEndian.Uint32(src[i*4 : i*4+4])
		x1 := binary.BigEndian.Uint32(src[i*4+4 : i*4+8])
		x2 := binary.BigEndian.Uint32(src[i*4+8 : i*4+12])
		x3 := binary.BigEndian.Uint32(src[i*4+12 : i*4+16])

		c0, c1, c2, c3 := decryptBlock(x0, x1, x2, x3, rk)

		binary.BigEndian.PutUint32(dst[i*4:i*4+4], c0)
		binary.BigEndian.PutUint32(dst[i*4+4:i*4+8], c1)
		binary.BigEndian.PutUint32(dst[i*4+8:i*4+12], c2)
		binary.BigEndian.PutUint32(dst[i*4+12:i*4+16], c3)
	}
}
